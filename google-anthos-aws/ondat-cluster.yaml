---
apiVersion: v1
kind: Namespace
metadata:
  name: storageos

# ServiceAccount for modinstall-DaemonSet
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: modinstall-daemonset-sa 
  namespace: storageos

# ClusterRole for init container.
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: init-container
rules:
- apiGroups:
  - apps
  resources:
  - daemonsets
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - delete


# Bind DaemonSet ServiceAccount with init-container ClusterRole.
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: init-container
subjects:
- kind: ServiceAccount
  name: modinstall-daemonset-sa
  namespace: storageos
roleRef:
  kind: ClusterRole
  name: init-container
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: modinstall-daemonset
  namespace: storageos
  labels:
    app: modinstall-daemonset
spec:
  selector:
    matchLabels:
      name: modinstall-daemonset
  template:
    metadata:
      labels:
        name: modinstall-daemonset
    spec:
      serviceAccountName: modinstall-daemonset-sa
      initContainers:
      - name: modinstall
        image: storageos/modinstall:ubuntu2004.1
        env:
          - name: MOD_INSTALL
            value: INSTALL
        command: [ 'bash']
        args: [ 'scripts/01-lio/enable-lio.sh' ]
        volumeMounts:
          - name: kernel-modules
            mountPath: /lib/modules
            mountPropagation: Bidirectional
          - name: sys
            mountPath: /sys
            mountPropagation: Bidirectional
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_ADMIN
      containers:
      - name: wait
        image: storageos/modinstall:ubuntu2004.1
        command: [ 'sleep']
        args: [ 'infinity' ]
      volumes:
        - name: kernel-modules
          hostPath:
            path: /lib/modules
        - name: sys
          hostPath:
            path: /sys
  updateStrategy:
    type: OnDelete

# Secret
---
apiVersion: v1
kind: Secret
metadata:
  name: storageos-api
  namespace: storageos
  labels:
    app: storageos
type: Opaque
data:
  password: c3RvcmFnZW9z # echo -n <username> | base64
  username: c3RvcmFnZW9z # echo -n <username> | base64

# CR cluster definition
---
apiVersion: storageos.com/v1
kind: StorageOSCluster
metadata:
  name: storageos-cluster
  namespace: "storageos"
spec:
  secretRefName: "storageos-api"
  secretRefNamespace: "storageos"
  k8sDistro: "upstream"
  storageClassName: storageos
#  images:
#    nodeContainer: "storageos/node:v2.5.0"
#    apiManagerContainer: storageos/api-manager:v1.2.2
#    initContainer: storageos/init:v2.1.0
#    csiNodeDriverRegistrarContainer: quay.io/k8scsi/csi-node-driver-registrar:v2.1.0
#    csiExternalProvisionerContainer: storageos/csi-provisioner:v2.1.1-patched
#    csiExternalAttacherContainer: quay.io/k8scsi/csi-attacher:v3.1.0
#    csiExternalResizerContainer: quay.io/k8scsi/csi-resizer:v1.1.0
#    csiLivenessProbeContainer: quay.io/k8scsi/livenessprobe:v2.2.0
#    kubeSchedulerContainer: k8s.gcr.io/kube-scheduler:v1.21.5
  kvBackend:
    address: "storageos-etcd-client.storageos:2379"
#  nodeSelectorTerms:
#    - matchExpressions:
#      - key: "node-role.kubernetes.io/worker" # Compute node label will vary according to your installation
#        operator: In
#        values:
#        - "true"
